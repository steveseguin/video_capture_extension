name: Auto Version Bump

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.github/**'
      - 'manifest.json'

permissions:
  contents: write

jobs:
  version-bump:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Get current version
      id: current_version
      run: |
        CURRENT_VERSION=$(jq -r '.version' manifest.json)
        echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        
    - name: Bump version
      id: bump_version
      run: |
        CURRENT_VERSION="${{ steps.current_version.outputs.CURRENT_VERSION }}"
        IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
        MAJOR="${VERSION_PARTS[0]}"
        MINOR="${VERSION_PARTS[1]}"
        PATCH="${VERSION_PARTS[2]}"
        
        # Increment patch version
        PATCH=$((PATCH + 1))
        
        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
        
    - name: Update manifest.json
      run: |
        jq '.version = "${{ steps.bump_version.outputs.NEW_VERSION }}"' manifest.json > manifest.tmp.json
        mv manifest.tmp.json manifest.json
        
    - name: Commit and push
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add manifest.json
        git commit -m "Bump version to ${{ steps.bump_version.outputs.NEW_VERSION }} [skip ci]"
        git push
        
    - name: Create and push tag
      run: |
        git tag "v${{ steps.bump_version.outputs.NEW_VERSION }}"
        git push origin "v${{ steps.bump_version.outputs.NEW_VERSION }}"
        
    - name: Create distribution package
      run: |
        # Create a clean distribution directory
        mkdir -p dist
        
        # Copy all necessary files for the extension
        cp -r icons dist/
        cp -r docs dist/
        cp manifest.json dist/
        cp *.js dist/ 2>/dev/null || true
        cp *.html dist/ 2>/dev/null || true
        cp *.css dist/ 2>/dev/null || true
        cp LICENSE dist/ 2>/dev/null || true
        cp README.md dist/ 2>/dev/null || true
        cp PRIVACY_JUSTIFICATIONS.md dist/ 2>/dev/null || true
        
        # Create the zip file
        cd dist
        zip -r ../vdo-ninja-capture-extension.zip *
        cd ..
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.bump_version.outputs.NEW_VERSION }}
        name: Release v${{ steps.bump_version.outputs.NEW_VERSION }}
        body: |
          ## VDO.Ninja Video Capture Extension v${{ steps.bump_version.outputs.NEW_VERSION }}
          
          ### Installation
          1. Download `vdo-ninja-capture-extension.zip` below
          2. Extract the ZIP file to a folder
          3. Open Chrome/Edge and navigate to `chrome://extensions/`
          4. Enable "Developer mode"
          5. Click "Load unpacked" and select the extracted folder
          
          ### What's Changed
          - See [commits](https://github.com/${{ github.repository }}/commits/v${{ steps.bump_version.outputs.NEW_VERSION }}) for details
        files: |
          vdo-ninja-capture-extension.zip
        draft: false
        prerelease: false
